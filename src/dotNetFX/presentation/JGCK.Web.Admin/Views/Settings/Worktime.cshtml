@section referenceHeader
{
    @*<link rel="stylesheet" type="text/css" href="~/assets/global/plugins/bootstrap-year-datepicker/css/default.css">*@
    <link rel="stylesheet" type="text/css" href="~/assets/global/plugins/bootstrap-year-datepicker/css/bootstrap-year-calendar.min.css">
    <style type="text/css">
        #calendar {
            width: 100%;
            height: 100%;
            overflow: hidden;
        }

        .month-title {
            color: black !important;
        }

        .day-header {
            color: black !important;
        }

        .day-content {
            color: black !important;
        }

        .buttonFlattening {
            background-color: #ff8c00; /* Green */
            border: none;
            color: white;
            font-family: Arial;
            padding: 10px 24px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
        }

        .calendar .month-container {
            height: 250px;
        }
    </style>
    <script>
        var pageUrl = "/Settings/Worktime?year=2018"
    </script>

}

@{ var selectedYear = Request["year"] ?? DateTime.Now.Year.ToString(); }
<div class="page-bar">
    <ul class="page-breadcrumb">
        <li>
            <a href="#">基础管理</a>
            <i class="fa fa-circle"></i>
        </li>
        <li>
            <span>日历维护(@(selectedYear))</span>
        </li>
    </ul>
    <div class="page-toolbar">
        <div class="btn-group pull-right">

        </div>
    </div>
</div>
<p></p>
<article>
    <div id="calendar"></div>
    <div style="margin-top: 10px;">
        <input id="btnUpdateRestDays" type="button" value="@($"更新{selectedYear}年全年休息日")" class="buttonFlattening" />&nbsp;
        <input id="btnRefresh" type="button" value="刷新" class="buttonFlattening" />
    </div>
</article>

@section scripts
{
    @*<script src="~/assets/global/plugins/bootstrap-year-datepicker/js/jquery-2.1.1.min.js"></script>*@
    <script type="text/javascript" src="~/assets/global/plugins/bootstrap-year-datepicker/js/bootstrap-datepicker.min.js"></script>
    <script type="text/javascript" src="~/assets/global/plugins/bootstrap-year-datepicker/js/bootstrap-year-calendar.min.js"></script>
    <script type="text/javascript" src="~/assets/global/plugins/bootstrap-year-datepicker/js/bootstrap-popover.js"></script>
    <script type="text/javascript">
        var rawRestTime = '@Html.Raw(ViewBag.RestDays)';
        var restTimeClass = {
            Year: 2018,
            RestMonths: [
                {
                    Month: 1,
                    Days: [5, 6]
                }, {
                    Month: 2,
                    Days: [5, 6]
                }, {
                    Month: 3,
                    Days: [5, 6]
                }
            ]
        }

        $(function() {
            $('#calendar').calendar({
                startYear: @(selectedYear),
                clickDay: function (e) {
                    var selYear = e.date.getYear() - 100 + 2000;
                    var selMonth = e.date.getMonth() + 1;
                    var selDay = e.date.getDate();

                    var current_bgColor = $(e.element).css("background-color");
                    if (typeof (current_bgColor) == "undefined" || current_bgColor == "rgba(0, 0, 0, 0)") {
                        $(e.element).css('background-color', 'blanchedalmond');
                        opRemoveAndAdd(1, selYear, selMonth, selDay);
                    } else {
                        $(e.element).css('background-color', '');
                        opRemoveAndAdd(2, selYear, selMonth, selDay);
                    }
                }
            });

            $("#btnUpdateRestDays").click(function() {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("AddOrUpdateRestWorktime")',
                    contentType: "application/json",
                    dataType: "json",
                    data: JSON.stringify(restTimeClass),
                    success: function(data) {
                        if (data.result == 1) {
                            location.href = location.href;
                        }
                    }
                });
            });

            $("#btnRefresh").click(function() {
                location.href = location.href;
            });

            restTimeClass = JSON.parse(rawRestTime);
            renderPageByJson();

            $('.year-neighbor, .year-neighbor2').click(function() {
                if(!$(this).hasClass('disabled')) {
                    location.href = "/settings/worktime?year=" + parseInt($(this).text());
                }
            });

            $('.calendar-header .prev').click(function() {
                if (!$(this).hasClass('disabled')) {
                    location.href = "/settings/worktime?year=" + (@selectedYear - 1);
                }
            });

            $('.calendar-header .next').click(function() {
                if (!$(this).hasClass('disabled')) {
                    location.href = "/settings/worktime?year=" + (@selectedYear + 1);
                }
            });
            //$(".calendar-header").hide();
        });

        var renderPageByJson = function() {
            var pushIndex = 0;
            Array.from($(".month")).forEach(function(e) {
                var monthDays = restTimeClass.RestMonths.find((m) => m.Month == (pushIndex + 1));
                if (typeof (monthDays) == "undefined" || monthDays.Days.length <= 0) {
                    pushIndex++;
                    return;
                }

                Array.from(monthDays.Days).forEach(function(restIntDay) {
                    var allDayDoms = $(e).find(".day .day-content");
                    var selectedDayDom = Array.from(allDayDoms)
                        .find((day) => day.innerText != "" && parseInt(day.innerText) == restIntDay)
                    if (typeof (selectedDayDom) != "undefined") {
                        $(selectedDayDom).parent().css('background-color', 'blanchedalmond');
                    }
                });
                pushIndex++;
            });
        }

        var opRemoveAndAdd = function(opMod, inYear, inMonth, inDay) {
            if (restTimeClass.Year != inYear)
                return;
            var selectedItem = restTimeClass.RestMonths.find(md => md.Month == inMonth);
            if (typeof (selectedItem) == "undefined")
                return;

            if (opMod == 1)
                selectedItem.Days.push(inDay);
            else
                selectedItem.Days.splice(jQuery.inArray(inDay, selectedItem.Days), 1);
        }
    </script>
}
